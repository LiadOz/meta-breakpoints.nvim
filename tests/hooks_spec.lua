local hooks = require("meta-breakpoints.hooks")
local spy = require("luassert.spy")

describe("test hooks", function()
  it("checks adding and removing hooks", function()
    local hook_1 = hooks.register_to_hook("a", function() end)
    local hook_2 = hooks.register_to_hook("a", function() end)
    assert.equals(2, #hooks.get_hooks_mapping("a"))
    hooks.remove_hook("a", hook_1)
    hooks.remove_hook("a", hook_2)
    assert.are.same({}, hooks.get_hooks_mapping("a"))
  end)

  it("checks removing multiple hooks", function()
    hooks.register_to_hook("a", function() end)
    hooks.register_to_hook("a", function() end)
    assert.equals(2, #hooks.get_hooks_mapping("a"))
    hooks.remove_hook("a")
    assert.are.same({}, hooks.get_hooks_mapping("a"))
  end)

  it("checks hooks priorities", function()
    local s = spy.new(function() end)
    hooks.register_to_hook("a", function() end)
    hooks.register_to_hook("a", s, 110)
    hooks.get_hooks_mapping("a")[1]()
    assert.spy(s).was.called(1)
    hooks.remove_hook("a")

    s = spy.new(function() end)
    hooks.register_to_hook("a", s, 1)
    hooks.register_to_hook("a", function() end)
    hooks.get_hooks_mapping("a")[2]()
    assert.spy(s).was.called(1)
    hooks.remove_hook("a")
  end)
end)
